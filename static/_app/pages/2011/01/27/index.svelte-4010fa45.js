import{S as k,i as I,s as x,N as $,e as g,t as w,k as j,j as M,c as p,a as f,g as y,d as l,n as S,m as z,b as v,f as B,D as s,o as C,E,x as T,u as D,v as A}from"../../../../chunks/vendor-40f27b4e.js";import{C as N}from"../../../../chunks/CodeRenderer-8c0a1f9a.js";function R(d){let e,o,c,h,m,r,n,i;return n=new $({props:{source:d[0],renderers:{code:N}}}),{c(){e=g("div"),o=g("p"),c=w("written on "),h=w(_),m=j(),r=g("div"),M(n.$$.fragment),this.h()},l(t){e=p(t,"DIV",{});var a=f(e);o=p(a,"P",{class:!0});var u=f(o);c=y(u,"written on "),h=y(u,_),u.forEach(l),m=S(a),r=p(a,"DIV",{class:!0});var b=f(r);z(n.$$.fragment,b),b.forEach(l),a.forEach(l),this.h()},h(){v(o,"class","date"),v(r,"class","content")},m(t,a){B(t,e,a),s(e,o),s(o,c),s(o,h),s(e,m),s(e,r),C(n,r,null),i=!0},p:E,i(t){i||(T(n.$$.fragment,t),i=!0)},o(t){D(n.$$.fragment,t),i=!1},d(t){t&&l(e),A(n)}}}let _="2011/01/27";function V(d){return[`

# No More Tumblr

A week or two ago I decided to stop using Tumblr and "roll my own" blog. Since I've been using [flask](http://flask.pocoo.org) to put [some projects](http://mattdeboard.net/projects) on the web, I decided to give [rstblog](https://github.com/mitsuhiko/rstblog) a go. (Both written by the [same guy](http://lucumr.pocoo.org).)

rstblog is very much a very "small" blog app, with only very minimal documentation. Thankfully [Morten Siebuhr](http://sbhr.dk/2010/11/30/using_rstblog/) put together a nice beginner's course on how to implement it. I referenced it heavily, though there were still some bumps on the road. Mostly, it took me awhile to realize you have to rm -r _build/ everytime you run-rstblog build. I was wondering why all of my links weren't updating; it was because when you do "run-rstblog build", it only seems to create templates that already exist. I don't have a great explanation. But if you're looking for rstblog tips, here's mine: rm -r _build/ every time you run-rstblog build.

I have also added a link to select projects in the header and generally cleaned and centralized everything.

Getting my blog in a somewhat finalized form also marks the end of the beginning of my movement toward setting up my own web server to function as a place to host my own projects, including the blog. I realize for most people who will read this running a webserver isn't that big a deal, and maybe even something you were doing in high school or before. But for me, this has been a new thing and a tremendous learning experience. Much thanks to Brett Hoerner for his [post on configuring Apache2 and nginx](http://bretthoerner.com/2008/10/9/configs-for-nginx-and-apache-mod-wsgi) for mod_wsgi. They've been a great reference source as I fumble with those two services.
`]}class H extends k{constructor(e){super();I(this,e,V,R,x,{})}}export{H as default};
